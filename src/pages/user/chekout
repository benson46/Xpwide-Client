"use client"

import React, { useEffect, useState } from "react"
import { useNavigate } from "react-router-dom"
import { axiosInstance } from "../../utils/axios"
import { IndianRupee, Plus, Minus, Check } from "lucide-react"
import toast from "react-hot-toast"
import { useSelector } from "react-redux"
import AddressForm from "../../components/user/AddressForm"
import AddressCard from "../../components/user/AddressCard"
import OrderSuccessModal from "../../components/OrderSuccessModal"

export default function CheckoutPage() {
  const [addresses, setAddresses] = useState([
    {
      id: "1",
      name: "John Doe",
      phone: "9876543210",
      pincode: "682021",
      address: "123 Green Valley Apartments",
      landmark: "Near City Mall",
      city: "Kochi",
      state: "KL",
      addressType: "home",
      isDefault: true,
    },
  ])
  const [selectedAddress, setSelectedAddress] = useState("1")
  const [showAddAddress, setShowAddAddress] = useState(false)
  const [editingAddress, setEditingAddress] = useState(null) // Added state for editing
  const [paymentMethod, setPaymentMethod] = useState("cod")
  const [couponCode, setCouponCode] = useState("")
  const [loading, setLoading] = useState(true)
  const [products, setProducts] = useState([])
  const [orderSummary, setOrderSummary] = useState({
    originalPrice: 0,
    discountedPrice: 0,
    deliveryFee: 0,
    couponDiscount: 0,
    total: 0,
  })
  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const navigate = useNavigate()

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [addressResponse, checkoutResponse] = await Promise.all([
          axiosInstance.get("/addresses"),
          axiosInstance.get("/checkout/details"),
        ])

        setAddresses(addressResponse.data.addresses)
        if (addressResponse.data.addresses.length > 0) {
          setSelectedAddress(addressResponse.data.addresses[0]._id)
        }

        // Set products details
        setProducts(checkoutResponse.data.products)

        // Calculate and set order summary
        const summary = checkoutResponse.data.summary
        setOrderSummary({
          originalPrice: summary.originalPrice,
          discountedPrice: summary.discountedPrice,
          deliveryFee: summary.deliveryFee,
          couponDiscount: summary.couponDiscount,
          total: summary.total,
        })
      } catch (error) {
        toast.error("Failed to load checkout data")
        console.error(error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  const handleAddAddress = (e) => {
    e.preventDefault()
    if (!editingAddress && addresses.length >= 10) {
      toast.error("Maximum 10 addresses allowed")
      return
    }
    const formData = new FormData(e.currentTarget)
    const newAddress = {
      id: Date.now().toString(),
      name: formData.get("name"),
      phone: formData.get("phone"),
      pincode: formData.get("pincode"),
      address: formData.get("address"),
      landmark: formData.get("landmark"),
      city: formData.get("city"),
      state: formData.get("state"),
      addressType: formData.get("addressType"),
      isDefault: addresses.length === 0,
    }
    setAddresses([...addresses, newAddress])
    setSelectedAddress(newAddress.id)
    setShowAddAddress(false)
    setEditingAddress(null) // Reset editing state after adding
  }

  const handleApplyCoupon = () => {
    // Implement coupon logic here
    console.log("Applying coupon:", couponCode)
  }

  const handleQuantityChange = async (productId, action) => {
    try {
      const response = await axiosInstance.post("/cart/update-quantity", {
        productId,
        action, // 'increase' or 'decrease'
      })

      // Update products with new quantity
      setProducts((prevProducts) =>
        prevProducts.map((product) =>
          product._id === productId
            ? { ...product, quantity: action === "increase" ? product.quantity + 1 : product.quantity - 1 }
            : product,
        ),
      )

      // Update order summary
      setOrderSummary(response.data.summary)
    } catch (error) {
      toast.error("Failed to update quantity")
      console.error(error)
    }
  }

  const handlePayment = async () => {
    switch (paymentMethod) {
      case "razorpay":
        // Implement Razorpay integration
        console.log("Processing Razorpay payment")
        break
      case "wallet":
        // Implement wallet payment
        console.log("Processing wallet payment")
        break
      default:
        // Handle COD
        console.log("Processing COD order")
    }
  }

  const handlePlaceOrder = async () => {
    if (!selectedAddress) {
      toast.error("Please select a delivery address")
      return
    }

    try {
      const response = await axiosInstance.post("/orders", {
        addressId: selectedAddress,
        paymentMethod,
        productId: products[0]?._id,
      })
      setShowSuccessModal(true)
    } catch (error) {
      toast.error("Failed to place order")
      console.error(error)
    }
  }

  const handleContinueShopping = () => {
    setShowSuccessModal(false)
    navigate("/")
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-8">Checkout</h1>

      <div className="grid gap-8 lg:grid-cols-2">
        {/* Left Column - Product Details, Address & Payment */}
        <div className="space-y-6">
          {/* Products Section */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-bold mb-4">Order Items</h2>
            <div className="space-y-6">
              {products.map((product) => (
                <div key={product._id} className="flex gap-4 border-b pb-4 last:border-0">
                  <img
                    src={product.images[0] || "/placeholder.svg"}
                    alt={product.name}
                    className="w-24 h-24 object-cover rounded-lg"
                  />
                  <div className="flex-1">
                    <h3 className="font-medium">{product.name}</h3>
                    <div className="mt-2 flex items-center gap-2">
                      <span className="text-lg font-bold flex items-center">
                        <IndianRupee className="h-4 w-4" />
                        {product.discountedPrice}
                      </span>
                      <span className="text-sm text-gray-500 line-through flex items-center">
                        <IndianRupee className="h-3 w-3" />
                        {product.originalPrice}
                      </span>
                    </div>
                    <div className="mt-2 text-sm text-gray-600">
                      Estimated Delivery:{" "}
                      {new Date(product.estimatedDelivery).toLocaleDateString("en-US", {
                        weekday: "long",
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </div>
                    <div className="mt-2 flex items-center gap-4">
                      <div className="flex items-center border rounded-lg">
                        <button
                          onClick={() => handleQuantityChange(product._id, "decrease")}
                          disabled={product.quantity <= 1}
                          className="p-2 hover:bg-gray-100 disabled:opacity-50"
                        >
                          <Minus className="h-4 w-4" />
                        </button>
                        <span className="px-4 py-2 border-x">{product.quantity}</span>
                        <button
                          onClick={() => handleQuantityChange(product._id, "increase")}
                          disabled={product.quantity >= product.maxQuantity}
                          className="p-2 hover:bg-gray-100 disabled:opacity-50"
                        >
                          <Plus className="h-4 w-4" />
                        </button>
                      </div>
                      <span className="text-sm text-gray-600">
                        Total: <IndianRupee className="h-3 w-3 inline" />
                        {(product.discountedPrice * product.quantity).toLocaleString()}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Address Section */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">Delivery Address</h2>
            <div className="space-y-6">
              <div className="space-y-4">
                {addresses.map((address) => (
                  <AddressCard
                    key={address.id}
                    address={address}
                    selected={selectedAddress === address.id}
                    setSelectedAddress={setSelectedAddress}
                  />
                ))}
                <button
                  onClick={() => setShowAddAddress(!showAddAddress)}
                  className="w-full py-2 px-4 border border-gray-300 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-50"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  {showAddAddress ? "Hide Form" : "Add New Address"}
                </button>
              </div>

              {showAddAddress && <AddressForm onSubmit={handleAddAddress} />}
            </div>
          </div>

          {/* Payment Method Section */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4">Payment Method</h2>
            <div className="space-y-4">
              <label className="flex items-center space-x-4 rounded-lg border p-4 cursor-pointer">
                <input
                  type="radio"
                  name="payment"
                  value="cod"
                  checked={paymentMethod === "cod"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                <div className="flex-1">
                  <p className="font-medium">Cash on Delivery</p>
                  <p className="text-sm text-gray-500">Pay when you receive your order</p>
                </div>
              </label>
              <label className="flex items-center space-x-4 rounded-lg border p-4 cursor-pointer">
                <input
                  type="radio"
                  name="payment"
                  value="razorpay"
                  checked={paymentMethod === "razorpay"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                <div className="flex-1">
                  <p className="font-medium">Razorpay</p>
                  <p className="text-sm text-gray-500">Pay securely with credit/debit card or UPI</p>
                </div>
              </label>
              <label className="flex items-center space-x-4 rounded-lg border p-4 cursor-pointer">
                <input
                  type="radio"
                  name="payment"
                  value="wallet"
                  checked={paymentMethod === "wallet"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />
                <div className="flex-1">
                  <p className="font-medium">Wallet</p>
                  <p className="text-sm text-gray-500">Available balance: ₹1,500</p>
                </div>
              </label>
            </div>
          </div>
        </div>

        {/* Right Column - Order Summary */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-bold mb-6">Price Details</h2>

          <div className="space-y-4">
            <div className="flex justify-between text-sm">
              <span>Price ({products.reduce((acc, p) => acc + p.quantity, 0)} items)</span>
              <span className="flex items-center">
                <IndianRupee className="h-4 w-4" />
                {orderSummary.originalPrice.toLocaleString()}
              </span>
            </div>

            <div className="flex justify-between text-sm">
              <span>Product Discount</span>
              <span className="text-green-600 flex items-center">
                -<IndianRupee className="h-4 w-4" />
                {(orderSummary.originalPrice - orderSummary.discountedPrice).toLocaleString()}
              </span>
            </div>

            <div className="flex justify-between text-sm">
              <span>Delivery Fee</span>
              {orderSummary.deliveryFee === 0 ? (
                <span className="text-green-600">FREE</span>
              ) : (
                <span className="flex items-center">
                  <IndianRupee className="h-4 w-4" />
                  {orderSummary.deliveryFee.toLocaleString()}
                </span>
              )}
            </div>

            {/* Coupon Code Section */}
            <div className="py-4 border-t border-b">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={couponCode}
                  onChange={(e) => setCouponCode(e.target.value)}
                  placeholder="Enter coupon code"
                  className="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-1 focus:ring-orange-500"
                />
                <button onClick={handleApplyCoupon} className="px-4 py-2 border rounded-lg hover:bg-gray-50">
                  Apply
                </button>
              </div>
              {orderSummary.couponDiscount > 0 && (
                <div className="flex justify-between mt-2 text-sm text-green-600">
                  <span>Coupon Discount</span>
                  <span className="flex items-center">
                    -<IndianRupee className="h-4 w-4" />
                    {orderSummary.couponDiscount.toLocaleString()}
                  </span>
                </div>
              )}
            </div>

            <div className="flex justify-between font-medium text-base pt-2">
              <span>Total Amount</span>
              <span className="flex items-center">
                <IndianRupee className="h-4 w-4" />
                {orderSummary.total.toLocaleString()}
              </span>
            </div>

            {orderSummary.originalPrice - orderSummary.total > 0 && (
              <div className="text-green-600 text-sm text-right">
                You will save <IndianRupee className="h-3 w-3 inline" />
                {(orderSummary.originalPrice - orderSummary.total).toLocaleString()} on this order
              </div>
            )}
          </div>

          <button
            onClick={handlePlaceOrder}
            disabled={!selectedAddress}
            className="mt-6 w-full py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Place Order
          </button>
        </div>
      </div>
      <OrderSuccessModal isOpen={showSuccessModal} amount={orderSummary.total} onClose={handleContinueShopping} />
    </div>
  )
}

